#include "VertexOutputs.hlsl"
#include "Utilities.hlsl"


struct BoneIndex
{
    uint mBone;
    float mWeight;
};

struct Bone
{
	float4x4 transform;
};

struct Constants
{
    uint mVertexCount;
    uint mVertexReadIndex;
    uint mVertexWriteIndex;
    uint mBoneIndex;
    uint mBlendShapeRead;
    uint mVertexStride;
};

[[vk::binding(0)]]
ByteAddressBuffer TPoseBuffer;

[[vk::binding(1)]]
StructuredBuffer<uint2> boneIndicies;

[[vk::binding(2)]]
StructuredBuffer<BoneIndex> boneWeights;

[[vk::binding(3)]]
StructuredBuffer<Bone> bones;

[[vk::binding(4)]]
RWByteAddressBuffer outVertex;

[[vk::binding(5)]]
ByteAddressBuffer VertexPatchBuffer;


[[vk::push_constant]]
ConstantBuffer<Constants> meshInfo;


[numthreads(32, 1, 1)]
void main(uint3 globalIndex : SV_DispatchThreadID)
{
	const uint vertexIndex = globalIndex.x;

	if(vertexIndex >= meshInfo.mVertexCount)
		return;

	Vertex vertToProcess = readVertexFromBuffer(VertexPatchBuffer, (meshInfo.mBlendShapeRead + vertexIndex) * meshInfo.mVertexStride);

	uint2 weightsIndexSize = boneIndicies[meshInfo.mVertexReadIndex + vertexIndex];

	float4x4 transform = float4x4(	float4(0.0f, 0.0f, 0.0f, 0.0f), 
									float4(0.0f, 0.0f, 0.0f, 0.0f), 
									float4(0.0f, 0.0f, 0.0f, 0.0f), 
									float4(0.0f, 0.0f, 0.0f, 0.0f));
	for(uint i = 0; i < weightsIndexSize.y; ++i)
	{
		BoneIndex index = boneWeights[weightsIndexSize.x + i];
		Bone bone = bones[meshInfo.mBoneIndex + index.mBone];

		transform += bone.transform * index.mWeight;
	}

	Vertex transformedVertex;
	transformedVertex.position = mul(transform, vertToProcess.position);
	transformedVertex.uv = vertToProcess.uv;
	transformedVertex.normal = float4(mul((float3x3)transform, vertToProcess.normal.xyz), 1.0f);
	transformedVertex.tangent = float4(mul((float3x3)transform, vertToProcess.tangent.xyz), vertToProcess.tangent.w);
	transformedVertex.colour = vertToProcess.colour;

	writeVertexToBuffer(outVertex, (meshInfo.mVertexWriteIndex + vertexIndex) * meshInfo.mVertexStride, transformedVertex);
}