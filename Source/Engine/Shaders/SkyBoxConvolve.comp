#include "PBR.hlsl"

[[vk::binding(0)]]
TextureCube<float4> skyBox;

[[vk::binding(1)]]
SamplerState defaultSampler;

// All the prefiltered cubemap mips
[[vk::binding(2)]]
RWTexture2DArray<float4> mip0;

[[vk::binding(3)]]
RWTexture2DArray<float4> mip1;

[[vk::binding(4)]]
RWTexture2DArray<float4> mip2;

[[vk::binding(5)]]
RWTexture2DArray<float4> mip3;

[[vk::binding(6)]]
RWTexture2DArray<float4> mip4;

[[vk::binding(7)]]
RWTexture2DArray<float4> mip5;

[[vk::binding(8)]]
RWTexture2DArray<float4> mip6;

[[vk::binding(9)]]
RWTexture2DArray<float4> mip7;

[[vk::binding(10)]]
RWTexture2DArray<float4> mip8;

[[vk::binding(11)]]
RWTexture2DArray<float4> mip9;

[[vk::binding(12)]]
RWTexture2DArray<float4> diffuseConvolve;


float3 prefilterEnviromentMapSpecular(const float roughness, const float3 R)
{
	float3 N = R;
	float3 V = R;

	float3 prefilteredColor = float3(0.0);

	float TotalWeight = 0.0;

	const uint SAMPLE_COUNT = 1024;
	for(uint i = 0; i < SAMPLE_COUNT; ++i)
	{
		float2 Xi = Hammersley(i, SAMPLE_COUNT);
		float3 H = ImportanceSampleGGX(Xi, roughness, N);
		float3 L = 2 * dot(V, H) * H - V;

		float NoL = clamp(dot(N, L), 0.0f, 1.0f);
		if(NoL > 0.0)
		{
			prefilteredColor += skyBox.Sample(defaultSampler, L).xyz * NoL;
			TotalWeight += NoL;
		}
	}

	return prefilteredColor / TotalWeight;
}


float3 prefilterEnviromentMapDiffuse(const float roughness, const float3 R)
{
	float3 N = R;
	float3 V = R;

	float3 prefilteredColor = float3(0.0);

	float TotalWeight = 0.0;

	const uint SAMPLE_COUNT = 1024;
	for(uint i = 0; i < SAMPLE_COUNT; ++i)
	{
		float2 Xi = Hammersley(i, SAMPLE_COUNT);
		float3 L;
		float  NdotL;
		importanceSampleCosDir(Xi, N, L, NdotL);

		if(NdotL > 0.0)
		{
			// Half  angle  formula:
			// cos(2  theta) = 2cos ^2( theta) - 1
			float  cosD = sqrt((dot(V, L) + 1.0f) * 0.5);
			float  NdotV = saturate(dot(R , V));
			float  NdotL_sat = saturate(NdotL);

			//  Disney  diffuse  BRDF  operates  in  linear  roughness ,
			//  which is the  sqrt of the  GGX  alpha  roughness  term
			float  fd90 = 0.5 + 2 * cosD*cosD * sqrt(roughness);
			float  lightScatter =   1 + (fd90 -1) * pow(1-NdotL_sat , 5);
			float  viewScatter   =   1 + (fd90 -1) * pow(1-NdotV , 5);
			float f = lightScatter * viewScatter;

			prefilteredColor += skyBox.Sample(defaultSampler, L).xyz * f;
			TotalWeight += 1.0f;
		}
	}

	return prefilteredColor / TotalWeight;
}


// Taken from http://hannosprogrammingblog.blogspot.com/2015/03/get-normal-for-cubemap-texel.html
float3 getNormalFromTexel(const int3 texelPosition, const float2 size)
{
	float2 position = float2(texelPosition.xy) / size;

	position -= 0.5; // remap 0-1 to -0.5-0.5
	position *= 2; // remap to -1-1

	const uint cubemapSide = texelPosition.z;

	float3 normal;
	
	if(cubemapSide == 0) 
	{ // facing x-dir
		normal = float3(1, -position.y, -position.x);
	} 
	else if(cubemapSide == 1) 
	{ // facing -x-dir
		normal = float3(-1, -position.y, position.x);
	} 
	else if(cubemapSide == 2) 
	{ // facing y-dir
		normal = float3(position.x, 1, position.y);
	} 
	else if(cubemapSide == 3) 
	{ // facing -y-dir
		normal = float3(-position.x, -1, position.y);
	} 
	else if(cubemapSide == 4) 
	{ // facing z-dir
		normal = float3(position.x, -position.y, 1);
	} 
	else if(cubemapSide == 5) 
	{ // facing -z-dir
		normal = float3(-position.x, -position.y, -1);
	}
	
	return normalize(normal);
}

[numthreads(8, 8, 6)]
void main(uint3 globalIndex : SV_DispatchThreadID)
{
	const int3 dispatchLocation = int3(globalIndex);

	float roughness = 0.0;
	{
		uint height, width, elements;
		mip0.GetDimensions(height, width, elements);
		const float2 size = float2(height, width);

		float3 normal = getNormalFromTexel(dispatchLocation, size);

		float3 convolvedColor = prefilterEnviromentMapSpecular(roughness, normal);

		if(dispatchLocation.x < size.x && dispatchLocation.y < size.y)
			mip0[dispatchLocation] = float4(convolvedColor, 1.0f);

		roughness += 0.1;
	}

	{
		uint height, width, elements;
		mip1.GetDimensions(height, width, elements);
		const float2 size = float2(height, width);
		float3 normal = getNormalFromTexel(dispatchLocation, size);

		float3 convolvedColor = prefilterEnviromentMapSpecular(roughness, normal);

		if(dispatchLocation.x < size.x && dispatchLocation.y < size.y)
			mip1[dispatchLocation] = float4(convolvedColor, 1.0f);

		roughness += 0.1;
	}

	{
		uint height, width, elements;
		mip2.GetDimensions(height, width, elements);
		const float2 size = float2(height, width);
		float3 normal = getNormalFromTexel(dispatchLocation, size);

		float3 convolvedColor = prefilterEnviromentMapSpecular(roughness, normal);

		if(dispatchLocation.x < size.x && dispatchLocation.y < size.y)
			mip2[dispatchLocation] = float4(convolvedColor, 1.0f);

		roughness += 0.1;
	}

	{
		uint height, width, elements;
		mip3.GetDimensions(height, width, elements);
		const float2 size = float2(height, width);
		float3 normal = getNormalFromTexel(dispatchLocation, size);

		float3 convolvedColor = prefilterEnviromentMapSpecular(roughness, normal);

		if(dispatchLocation.x < size.x && dispatchLocation.y < size.y)
			mip3[dispatchLocation] = float4(convolvedColor, 1.0f);

		roughness += 0.1;
	}

	{
		uint height, width, elements;
		mip4.GetDimensions(height, width, elements);
		const float2 size = float2(height, width);
		float3 normal = getNormalFromTexel(dispatchLocation, size);

		float3 convolvedColor = prefilterEnviromentMapSpecular(roughness, normal);

		if(dispatchLocation.x < size.x && dispatchLocation.y < size.y)
			mip4[dispatchLocation] = float4(convolvedColor, 1.0f);

		roughness += 0.1;
	}

	{
		uint height, width, elements;
		mip5.GetDimensions(height, width, elements);
		const float2 size = float2(height, width);
		float3 normal = getNormalFromTexel(dispatchLocation, size);

		float3 convolvedColor = prefilterEnviromentMapSpecular(roughness, normal);

		if(dispatchLocation.x < size.x && dispatchLocation.y < size.y)
			mip5[dispatchLocation] = float4(convolvedColor, 1.0f);

		roughness += 0.1;
	}

	{
		uint height, width, elements;
		mip6.GetDimensions(height, width, elements);
		const float2 size = float2(height, width);
		float3 normal = getNormalFromTexel(dispatchLocation, size);

		float3 convolvedColor = prefilterEnviromentMapSpecular(roughness, normal);

		if(dispatchLocation.x < size.x && dispatchLocation.y < size.y)
			mip6[dispatchLocation] = float4(convolvedColor, 1.0f);

		roughness += 0.1;
	}

	{
		uint height, width, elements;
		mip7.GetDimensions(height, width, elements);
		const float2 size = float2(height, width);
		float3 normal = getNormalFromTexel(dispatchLocation, size);

		float3 convolvedColor = prefilterEnviromentMapSpecular(roughness, normal);

		if(dispatchLocation.x < size.x && dispatchLocation.y < size.y)
			mip7[dispatchLocation] = float4(convolvedColor, 1.0f);

		roughness += 0.1;
	}

	{
		uint height, width, elements;
		mip8.GetDimensions(height, width, elements);
		const float2 size = float2(height, width);
		float3 normal = getNormalFromTexel(dispatchLocation, size);

		float3 convolvedColor = prefilterEnviromentMapSpecular(roughness, normal);

		if(dispatchLocation.x < size.x && dispatchLocation.y < size.y)
			mip8[dispatchLocation] = float4(convolvedColor, 1.0f);

		roughness += 0.1;

	}

	{
		uint height, width, elements;
		mip9.GetDimensions(height, width, elements);
		const float2 size = float2(height, width);
		float3 normal = getNormalFromTexel(dispatchLocation, size);

		float3 convolvedColor = prefilterEnviromentMapSpecular(roughness, normal);

		if(dispatchLocation.x < size.x && dispatchLocation.y < size.y)
			mip9[dispatchLocation] = float4(convolvedColor, 1.0f);
	}

	// Convolve for diffuse.
	{
		uint height, width, elements;
		diffuseConvolve.GetDimensions(height, width, elements);
		const float2 size = float2(height, width);
		float3 normal = getNormalFromTexel(dispatchLocation, size);

		float3 convolvedColor = prefilterEnviromentMapDiffuse(roughness, normal);

		if(dispatchLocation.x < size.x && dispatchLocation.y < size.y)
			diffuseConvolve[dispatchLocation] = float4(convolvedColor, 1.0f);
	}
}