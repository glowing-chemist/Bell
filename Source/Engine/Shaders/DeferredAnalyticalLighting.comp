#include "UniformBuffers.hlsl"
#include "NormalMapping.hlsl"
#include "ClusteredLighting.hlsl"


[[vk::binding(0)]]
ConstantBuffer<CameraBuffer> camera;

[[vk::binding(1)]]
Texture2D<float3> DFG;

[[vk::binding(2)]]
Texture2D<float4> ltcMat;

[[vk::binding(3)]]
Texture2D<float2> ltcAmp;

[[vk::binding(4)]]
Texture2D<float> depth;

[[vk::binding(5)]]
Texture2D<float2> vertexNormals;

[[vk::binding(6)]]
Texture2D<float4> Diffuse;

[[vk::binding(7)]]
Texture2D<float4> SpecularRoughness;

[[vk::binding(8)]]
SamplerState linearSampler;

[[vk::binding(9)]]
SamplerState pointSampler;

[[vk::binding(10)]]
StructuredBuffer<uint2> sparseFroxelList;

[[vk::binding(11)]]
StructuredBuffer<uint> indicies;

[[vk::binding(12)]]
Texture2D<uint> activeFroxels;

[[vk::binding(13)]]
RWTexture2D<float4> accumilatedLight;


[[vk::binding(0, 1)]]
StructuredBuffer<uint4> lightCount;

[[vk::binding(1, 1)]]
StructuredBuffer<Light> sceneLights;


[numthreads(32, 32, 1)]
void main(uint3 globalIndex : SV_DispatchThreadID)
{
	const float2 gbufferSize = camera.frameBufferSize;
	const float2 uv = float2(globalIndex.xy) / gbufferSize;

	if(globalIndex.x >= gbufferSize.x || globalIndex.y >= gbufferSize.y)
		return;

	const float fragmentDepth = depth.Sample(linearSampler, uv);

	float4 worldSpaceFragmentPos = mul(camera.invertedViewProj, float4((uv - 0.5f) * 2.0f, fragmentDepth, 1.0f));
	worldSpaceFragmentPos /= worldSpaceFragmentPos.w;

	float3 normal = decodeOct(vertexNormals.Load(int3(globalIndex.xy, 0)));

    const float3 viewDir = normalize(float4(camera.position, 1.0f) - worldSpaceFragmentPos).xyz;

    const float4 specularRoughness = SpecularRoughness.Sample(linearSampler, uv);

    MaterialInfo material;
    material.diffuse = Diffuse.Sample(linearSampler, uv);
    material.normal = float4(normal, 1.0f);
    material.specularRoughness = specularRoughness;

    const uint froxelIndex = activeFroxels.Sample(pointSampler, uv);
    const uint2 lightListIndicies = sparseFroxelList[froxelIndex];

    float roughness = material.specularRoughness.w;

    // Initialize needed lighting params.
    float3x3 minV;
    float LTCAmp;
    float3 dfg;
    initializeLightState(minV, LTCAmp, dfg, DFG, ltcMat, ltcAmp, linearSampler, dot(material.normal.xyz, viewDir), roughness * roughness);

    float4 lighting = float4(0.0f);

    for(uint i = 0; i < lightListIndicies.y; ++i)
    {
    	uint indirectLightIndex = indicies[lightListIndicies.x + i];
    	const Light light = sceneLights[indirectLightIndex];

    	        switch(uint(light.type))
        {
            case 0:
            {
                lighting += pointLightContribution( light, 
                                                    worldSpaceFragmentPos, 
                                                    viewDir, 
                                                    material,
                                                    dfg);
                break;
            }

            case 1: // Spot.
            {
                lighting +=  spotLightContribution( light, 
                                                    worldSpaceFragmentPos, 
                                                    viewDir, 
                                                    material,
                                                    dfg);
                break;
            }

            case 2: // Area.
            {
                lighting +=  areaLightContribution( light, 
                                                    worldSpaceFragmentPos, 
                                                    viewDir, 
                                                    material,
                                                    minV, 
                                                    LTCAmp);
                break;
            }

            // Should never hit here.
            default:
                continue;
        }
    }

    accumilatedLight[globalIndex.xy] = lighting;
}
