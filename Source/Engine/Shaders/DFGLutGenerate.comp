#include "PBR.hlsl"


[[vk::binding(0)]]
RWTexture2D<float2> DFGLUT;


// https://google.github.io/filament/Filament.html#toc4.4.2
float V_SmithGGXCorrelated(float NoV, float NoL, float roughness) {
    float a2 = pow(roughness, 4.0);
    float GGXV = NoL * sqrt(NoV * NoV * (1.0 - a2) + a2);
    float GGXL = NoV * sqrt(NoL * NoL * (1.0 - a2) + a2);
    return 0.5 / (GGXV + GGXL);
}


float2 integrateBRDF(float roughness, float NoV)
{
	float3 V;
    V.x = sqrt(1.0 - NoV * NoV); // sin
    V.y = 0.0;
    V.z = NoV; // cos

    // N points straight upwards for this integration
    const float3 N = float3(0.0, 0.0, 1.0);

    float A = 0.0;
    float B = 0.0;
    const uint numSamples = 1024;

    for (uint i = 0u; i < numSamples; i++) {
        float2 Xi = Hammersley(i, numSamples);
        // Sample microfacet direction
        float3 H = ImportanceSampleGGX(Xi, roughness, N);

        // Get the light direction
        float3 L = 2.0 * dot(V, H) * H - V;

        float NoL = clamp(dot(N, L), 0.0f, 1.0f);
        float NoH = clamp(dot(N, H), 0.0f, 1.0f);
        float VoH = clamp(dot(V, H), 0.0f, 1.0f);

        if (NoL > 0.0) {
            // Terms besides V are from the GGX PDF we're dividing by
            float V_pdf = V_SmithGGXCorrelated(NoV, NoL, roughness) * VoH * NoL / NoH;
            float Fc = pow(1.0 - VoH, 5.0);
            A += (1.0 - Fc) * V_pdf;
            B += Fc * V_pdf;
        }
    }

    return 4.0 * float2(A, B) / float(numSamples);
}

[numthreads(16, 16, 1)]
void main(uint3 globalIndex : SV_DispatchThreadID)
{
    // Normalized pixel coordinates (from 0 to 1)
    uint height, width;
    DFGLUT.GetDimensions(height, width);
    float2 uv = float2(globalIndex.xy + 1) / float2(height, width);
    float mu = uv.x;
    float a = uv.y;

    // Scale and Bias for F0 (as per Karis 2014)
    DFGLUT[globalIndex.xy] =  integrateBRDF(a, mu);;
}