#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : enable

#include "ClusteredLighting.glsl"
#include "UniformBuffers.glsl"

layout(rgba16ui, binding = 0) uniform writeonly uimage2D activeFroxels;

layout(binding = 1) uniform texture2D depth;

layout(binding = 2) uniform cameraBuffer
{
	CameraBuffer camera;
};

layout(binding = 3) uniform sampler linearSampler;

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;


void main()
{
	vec2 size = textureSize(sampler2D(depth, linearSampler), 0);

	vec2 uv = vec2(gl_GlobalInvocationID.xy) / size;

	float depth = texture(sampler2D(depth, linearSampler), uv).x;

	uvec3 froxelPos = getFroxelPosition(uv, depth, size, camera.nearPlane, camera.farPlane, 90.0f);

	if(gl_GlobalInvocationID.x <= size.x && gl_GlobalInvocationID.y <= size.y)
		imageStore(activeFroxels, ivec2(gl_GlobalInvocationID.xy), uvec4(froxelPos, 1));
}