
#include "ClusteredLighting.hlsl"
#include "UniformBuffers.hlsl"

[[vk::binding(0)]]
RWTexture2D<uint> activeFroxels;

[[vk::binding(1)]]
Texture2D<float> depth;

[[vk::binding(2)]]
ConstantBuffer<CameraBuffer> camera;

[[vk::binding(3)]]
SamplerState linearSampler;

[[vk::binding(4)]] 
AppendStructuredBuffer<uint4> visibleFroxles;

groupshared uint froxelBitSet;

[numthreads(32, 32, 1)]
void main(	uint localIndex : SV_GroupIndex, 
			uint3 globalIndex : SV_DispatchThreadID)
{
	if(localIndex == 0)
	{
		froxelBitSet = 0;
	}

	float2 size = camera.frameBufferSize;

	float2 uv = float2(globalIndex.xy) / size;

	float depth = depth.Sample(linearSampler, uv);

	uint3 froxelPos = getFroxelPosition(globalIndex.xy, depth, size, camera.nearPlane, camera.farPlane, camera.fov);
	uint froxelIndex = getFroxelIndex(froxelPos, uint2(size));

	if(globalIndex.x <= size.x && globalIndex.y <= size.y)
		activeFroxels[int2(globalIndex.xy)] = froxelIndex;

	uint bitset = WaveActiveBitOr(1u << froxelPos.z);

	// Shared memory must be zeroed by now.
	AllMemoryBarrierWithGroupSync();

	if(WaveIsFirstLane())
	{
		uint original;
		InterlockedOr(froxelBitSet, bitset, original);
	}

	AllMemoryBarrierWithGroupSync();

	if(localIndex < uint(DEPTH_SUBDIVISIONS)) // Max number of depth slices.
	{
		const uint isActive = froxelBitSet & (1u << localIndex);

		if(isActive > 0u)
		{
			visibleFroxles.Append(uint4(froxelPos.xy, localIndex, 0u));
		}
	}
}
