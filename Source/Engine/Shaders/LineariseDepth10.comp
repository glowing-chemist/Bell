#include "UniformBuffers.hlsl"
#include "Utilities.hlsl"

[[vk::binding(0)]]
globallycoherent RWTexture2D<float2> linearDepthBufferMip0;

[[vk::binding(1)]]
globallycoherent RWTexture2D<float2> linearDepthBufferMip1;

[[vk::binding(2)]]
globallycoherent RWTexture2D<float2> linearDepthBufferMip2;

[[vk::binding(3)]]
globallycoherent RWTexture2D<float2> linearDepthBufferMip3;

[[vk::binding(4)]]
globallycoherent RWTexture2D<float2> linearDepthBufferMip4;

[[vk::binding(5)]]
globallycoherent RWTexture2D<float2> linearDepthBufferMip5;

[[vk::binding(6)]]
globallycoherent RWTexture2D<float2> linearDepthBufferMip6;

[[vk::binding(7)]]
globallycoherent RWTexture2D<float2> linearDepthBufferMip7;

[[vk::binding(8)]]
globallycoherent RWTexture2D<float2> linearDepthBufferMip8;

[[vk::binding(9)]]
globallycoherent RWTexture2D<float2> linearDepthBufferMip9;

[[vk::binding(10)]]
Texture2D<float> gbufferDepth;

[[vk::binding(11)]]
ConstantBuffer<CameraBuffer> camera;

[[vk::binding(12)]]
SamplerState linearSampler;


void downSample(uint2 pos, RWTexture2D<float2> readMip, RWTexture2D<float2> writeMip)
{
	uint width, height;
	writeMip.GetDimensions(width, height);
	if(pos.x < width && pos.y < height)
	{
		const float4 depthTapsMin = 	float4(readMip.Load(pos.xy * 2).x,
											readMip.Load((pos.xy * 2) + uint2(1, 0)).x,
											readMip.Load((pos.xy * 2) + uint2(1, 1)).x,
											readMip.Load((pos.xy * 2) + uint2(0, 1)).x);

		const float4 depthTapsMax = float4(readMip.Load(pos.xy * 2).y,
										readMip.Load((pos.xy * 2) + uint2(1, 0)).y,
										readMip.Load((pos.xy * 2) + uint2(1, 1)).y,
										readMip.Load((pos.xy * 2) + uint2(0, 1)).y);

		const float maxDepth = max(max(depthTapsMax.x, depthTapsMax.y), max(depthTapsMax.z, depthTapsMax.w));
		const float minDepth = min(min(depthTapsMin.x, depthTapsMin.y), min(depthTapsMin.z, depthTapsMin.w));

		if(pos.x < width && pos.y < height)
			writeMip[pos.xy] = float2(minDepth, maxDepth);
	}
}


[numthreads(16, 16, 1)]
void main(uint3 globalIndex : SV_DispatchThreadID)
{
	const float2 size = camera.frameBufferSize;
	const float2 uv = float2(globalIndex.xy) / camera.frameBufferSize;

	const float depth = gbufferDepth.Sample(linearSampler, uv);
	float4 viewSpaceFragmentPos = mul(camera.invertedPerspective, float4((uv - 0.5f) * 2.0f, depth, 1.0f));
    viewSpaceFragmentPos /= viewSpaceFragmentPos.w;
	float linearDepth = -viewSpaceFragmentPos.z;

	uint width, height;
	linearDepthBufferMip0.GetDimensions(width, height);

	if(globalIndex.x < width && globalIndex.y < height)
		linearDepthBufferMip0[globalIndex.xy] = float2(linearDepth, linearDepth);

	AllMemoryBarrierWithGroupSync();

	downSample(globalIndex.xy, linearDepthBufferMip0, linearDepthBufferMip1);

	AllMemoryBarrierWithGroupSync();

	downSample(globalIndex.xy, linearDepthBufferMip1, linearDepthBufferMip2);

	AllMemoryBarrierWithGroupSync();

	downSample(globalIndex.xy, linearDepthBufferMip2, linearDepthBufferMip3);

	AllMemoryBarrierWithGroupSync();

	downSample(globalIndex.xy, linearDepthBufferMip3, linearDepthBufferMip4);

	AllMemoryBarrierWithGroupSync();

	downSample(globalIndex.xy, linearDepthBufferMip4, linearDepthBufferMip5);

	AllMemoryBarrierWithGroupSync();

	downSample(globalIndex.xy, linearDepthBufferMip5, linearDepthBufferMip6);

	AllMemoryBarrierWithGroupSync();

	downSample(globalIndex.xy, linearDepthBufferMip6, linearDepthBufferMip7);

	AllMemoryBarrierWithGroupSync();

	downSample(globalIndex.xy, linearDepthBufferMip7, linearDepthBufferMip8);

	AllMemoryBarrierWithGroupSync();

	downSample(globalIndex.xy, linearDepthBufferMip8, linearDepthBufferMip9);
}