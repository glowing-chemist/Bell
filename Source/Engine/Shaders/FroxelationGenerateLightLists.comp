#include "ClusteredLighting.hlsl"
#include "UniformBuffers.hlsl"

[[vk::binding(0)]]
StructuredBuffer<uint4> visibleFroxles;

[[vk::binding(1)]]
RWStructuredBuffer<uint> visibleFroxelCounter;

[[vk::binding(2)]]
RWStructuredBuffer<uint> froxelIndicies;

[[vk::binding(3)]]
RWStructuredBuffer<uint> froxelIndexCounter;

[[vk::binding(4)]]
RWStructuredBuffer<uint2> sparseFroxelList;

[[vk::binding(5)]]
ConstantBuffer<CameraBuffer> camera;

[[vk::binding(0, 1)]]
StructuredBuffer<uint4> lightCount;

[[vk::binding(1, 1)]]
StructuredBuffer<Light> sceneLights;


[numthreads(256, 1, 1)]
void main(uint3 globalIndex : SV_DispatchThreadID)
{
	const uint froxelIndex = globalIndex.x;

	if(froxelIndex >= visibleFroxelCounter[0])
		return;

	const uint3 froxelToProcess = visibleFroxles[froxelIndex].xyz;

	const AABB aabb = getFroxelAABB(froxelToProcess, camera.fov, camera.frameBufferSize, camera.nearPlane, camera.farPlane);

	uint nextFreeSlot = 0;
	uint lightIndicies[LIGHTS_PER_FROXEL];

	for(uint i = 0; i < lightCount[0].x; ++i)
	{
		const Light light = sceneLights[i];
		float4 viewSpacePosition = mul(camera.view, light.position);
		viewSpacePosition /= viewSpacePosition.w;
		switch(light.type)
		{
			case 0: // Point light
			{
				const bool intersects = sphereAABBIntersection(viewSpacePosition.xyz, light.radius, aabb);
				if(intersects)
				{
					lightIndicies[nextFreeSlot++] = i;
				}
				break;
			}

			case 1: // spot light
			{
				const bool intersects = spotLightAABBIntersection(viewSpacePosition.xyz, light.direction.xyz, light.misc, light.radius, aabb);
				if(intersects)
				{
					lightIndicies[nextFreeSlot++] = i;
				}
				break;
			}

			case 2: // area.
			{
                const bool intersects = areaLightAABBIntersection(viewSpacePosition.xyz, light.direction.xyz, light.up.xyz, light.radius, aabb);
				if(intersects)
				{
					lightIndicies[nextFreeSlot++] = i;
				}
				break;
			}

			// TODO add more light types as and when supported.

			// Should never hit here.
			default:
				continue;
		}

		// Don't evaluate any more lights if we have asigned all available slots.
		if(nextFreeSlot == LIGHTS_PER_FROXEL)
			break;
	}

	// Update the global data structures.
	uint startLightIndex;
	InterlockedAdd(froxelIndexCounter[0], nextFreeSlot, startLightIndex);

	for(uint i = 0; i < nextFreeSlot; ++i)
	{
		froxelIndicies[startLightIndex + i] = lightIndicies[i];
	}

	sparseFroxelList[getFroxelIndex(froxelToProcess, uint2(camera.frameBufferSize))] = uint2(startLightIndex, nextFreeSlot);
}
