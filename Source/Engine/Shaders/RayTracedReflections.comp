#include "RayTracing.hlsl"
#include "UniformBuffers.hlsl"
#include "PBR.hlsl"
#include "NormalMapping.hlsl"


[[vk::binding(0)]]
ConstantBuffer<CameraBuffer> camera;

[[vk::binding(1)]]
Texture2D<float4> normals;

[[vk::binding(2)]]
Texture2D<float4> specularRoughness;

[[vk::binding(3)]]
Texture2D<float> depth;

[[vk::binding(4)]]
SamplerState linearSampler;

[[vk::binding(5)]]
RWTexture2D<float4> reflectionBuffer;

[[vk::binding(6)]]
TextureCube<float4> skybox;


[[vk::binding(0, 1)]]
Texture2D materials[];


[[vk::binding(0, 2)]]
//ByteAddressBuffer bvhNodes;
StructuredBuffer<BVHNode> bvhNodes;

[[vk::binding(1, 2)]]
StructuredBuffer<uint> bvhIndicies;

[[vk::binding(2, 2)]]
StructuredBuffer<MaterialOffsets> PrimToMatID;

[[vk::binding(3, 2)]]
ByteAddressBuffer vertexPositionBuffer;

[[vk::binding(4, 2)]]
StructuredBuffer<float2> vertexUVBuffer;

[[vk::binding(5, 2)]]
StructuredBuffer<uint> indexBuffer;

#include "Materials.hlsl"

[numthreads(16, 16, 1)]
void main(uint3 globalIndex : SV_DispatchThreadID)
{

	uint width, height;
	reflectionBuffer.GetDimensions(width, height);

	const float2 uv = float2(globalIndex.xy) / float2(width, height);
	const float fragmentDepth = depth.Sample(linearSampler, uv);

	if(fragmentDepth == 0.0f) // skybox
	{
		return;
	}

	float3 normal = normals.Sample(linearSampler, uv);
	normal = normalize(remapNormals(normal));
	const float roughness = specularRoughness.Sample(linearSampler, uv).w;
	const float LOD = roughness * 10.0f;

	float4 worldSpaceFragmentPos = mul(camera.invertedViewProj, float4((uv - 0.5f) * 2.0f, fragmentDepth, 1.0f));
    worldSpaceFragmentPos /= worldSpaceFragmentPos.w;

    float3 view = camera.position - worldSpaceFragmentPos.xyz;

	Ray reflectionRay;
	reflectionRay.position = worldSpaceFragmentPos.xyz;
	reflectionRay.direction = reflect(normalize(-view), normal);
	reflectionRay.max_t = 2000.0f;
	reflectionRay.min_t = 0.001f;

	float4 lighting = float4(0.0f, 0.0f, 0.0f, 1.0f);
	TriangleIntersector intersector;
	TriangleIntersection result;
	const bool hit = traverseBVH(bvhNodes, bvhIndicies, indexBuffer, vertexPositionBuffer, reflectionRay, intersector, result);
	if(!hit)
	{
		lighting = skybox.SampleLevel(linearSampler, reflectionRay.direction, LOD);
	}
	else // fetch material data.
	{
		MaterialOffsets matInfo = PrimToMatID[result.prim_id];
	
		float2 uv = interpolateUV(result, indexBuffer, vertexUVBuffer);

		// TODO!!!! add NonUniformResourceIndex once it is supported in shaderc or move over to dxc.
		lighting = materials[matInfo.materialIndex].SampleLevel(linearSampler, uv, LOD);
	}


	if(globalIndex.x < width && globalIndex.y < height)
		reflectionBuffer[globalIndex.xy] = lighting;
}