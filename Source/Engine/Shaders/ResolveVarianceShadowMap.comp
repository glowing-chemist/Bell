#include "UniformBuffers.hlsl"
#include "Utilities.hlsl"
#include "ShadowMapping.hlsl" 


[[vk::binding(0)]]
Texture2D<float> depth;

[[vk::binding(1)]]
Texture2D<float2> shadowMapRaw;

[[vk::binding(2)]]
RWTexture2D<float> shadowMap;

[[vk::binding(3)]]
ConstantBuffer<ShadowingLight> light;

[[vk::binding(4)]]
ConstantBuffer<CameraBuffer> camera;

[[vk::binding(5)]]
SamplerState linearSampler;

[numthreads(32, 32, 1)]
void main(uint3 globalIndex : SV_DispatchThreadID)
{
	const float2 gbufferSize = camera.frameBufferSize;
	const float2 uv = (float2(globalIndex.xy) / gbufferSize) + camera.jitter;

	const float fragmentDepth = depth.Sample(linearSampler, uv);

	float4 worldSpaceFragmentPos = mul(camera.invertedViewProj, float4((uv - 0.5f) * 2.0f, fragmentDepth, 1.0f));
    worldSpaceFragmentPos /= worldSpaceFragmentPos.w;

	float4 fragPositionVS = mul(light.view, worldSpaceFragmentPos);

    float4 fragPositionNDC = mul(light.viewProj, worldSpaceFragmentPos);
    fragPositionNDC /= fragPositionNDC.w;

    float2 lightSpaceUV = (fragPositionNDC.xy * 0.5f) + 0.5f;
    float variance = 0.0f;
    if(lightSpaceUV.x >= 0.0f && lightSpaceUV.x <= 1.0f && lightSpaceUV.y >= 0.0f && lightSpaceUV.y <= 1.0f && fragPositionVS.z <= 0.0f)
    {
        const float2 moments = shadowMapRaw.Sample(linearSampler, lightSpaceUV);
        variance = varianceOcclusionFactor(-fragPositionVS.z, moments);
    }
    variance = clamp(variance, 0.15f, 1.0f);

    if(globalIndex.x <= gbufferSize.x && globalIndex.y <= gbufferSize.y)
			shadowMap[globalIndex.xy] =  variance; 
}